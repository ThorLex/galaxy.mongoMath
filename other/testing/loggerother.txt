// src/utils/logger.js
const winston = require('winston');
const path = require('path');
require('winston-daily-rotate-file');

// Configuration des couleurs pour la console
const colors = {
  error: 'red',
  warn: 'yellow',
  info: 'green',
  debug: 'blue',
  verbose: 'gray'
};

winston.addColors(colors);

// Format personnalisé pour les logs
const customFormat = winston.format.combine(
  winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
  }),
  winston.format.errors({ stack: true }),
  winston.format.printf(({ level, message, timestamp, stack, ...metadata }) => {
    let log = `[${timestamp}] [${level.toUpperCase()}]: ${message}`;
    
    // Ajouter les métadonnées si présentes
    if (Object.keys(metadata).length > 0) {
      log += ` ${JSON.stringify(metadata)}`;
    }
    
    // Ajouter la stack trace pour les erreurs
    if (stack) {
      log += `\n${stack}`;
    }
    
    return log;
  })
);

// Configuration des transports
const transports = {
  console: new winston.transports.Console({
    level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
    format: winston.format.combine(
      winston.format.colorize({ all: true }),
      customFormat
    )
  }),
  
  // Rotation quotidienne des fichiers d'erreur
  errorFile: new winston.transports.DailyRotateFile({
    level: 'error',
    filename: path.join('logs', 'error-%DATE%.log'),
    datePattern: 'YYYY-MM-DD',
    maxSize: '20m',
    maxFiles: '14d',
    format: customFormat
  }),
  
  // Rotation quotidienne des fichiers combinés
  combinedFile: new winston.transports.DailyRotateFile({
    filename: path.join('logs', 'combined-%DATE%.log'),
    datePattern: 'YYYY-MM-DD',
    maxSize: '20m',
    maxFiles: '14d',
    format: customFormat
  })
};

// Création du logger
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  levels: winston.config.npm.levels,
  transports: [
    transports.console,
    transports.errorFile,
    transports.combinedFile
  ],
  // Ne pas quitter sur une erreur non gérée
  exitOnError: false
});

// Wrapper pour ajouter des fonctionnalités supplémentaires
class MongoMathLogger {
  constructor(defaultMeta = {}) {
    this.defaultMeta = defaultMeta;
    this.logger = logger;
  }

  /**
   * Log un message de niveau error
   * @param {string} message - Message principal
   * @param {Error|object} [error] - Erreur ou métadonnées additionnelles
   * @param {object} [meta] - Métadonnées additionnelles
   */
  error(message, error = null, meta = {}) {
    const logMeta = { ...this.defaultMeta, ...meta };
    if (error instanceof Error) {
      logMeta.error = {
        name: error.name,
        stack: error.stack,
        message: error.message
      };
    } else if (error) {
      Object.assign(logMeta, error);
    }
    this.logger.error(message, logMeta);
  }

  /**
   * Log un message de niveau warn
   * @param {string} message - Message principal
   * @param {object} [meta] - Métadonnées additionnelles
   */
  warn(message, meta = {}) {
    this.logger.warn(message, { ...this.defaultMeta, ...meta });
  }

  /**
   * Log un message de niveau info
   * @param {string} message - Message principal
   * @param {object} [meta] - Métadonnées additionnelles
   */
  info(message, meta = {}) {
    this.logger.info(message, { ...this.defaultMeta, ...meta });
  }

  /**
   * Log un message de niveau debug
   * @param {string} message - Message principal
   * @param {object} [meta] - Métadonnées additionnelles
   */
  debug(message, meta = {}) {
    this.logger.debug(message, { ...this.defaultMeta, ...meta });
  }

  /**
   * Log un message de niveau verbose
   * @param {string} message - Message principal
   * @param {object} [meta] - Métadonnées additionnelles
   */
  verbose(message, meta = {}) {
    this.logger.verbose(message, { ...this.defaultMeta, ...meta });
  }

  /**
   * Log une opération de base de données
   * @param {string} operation - Nom de l'opération
   * @param {string} collection - Nom de la collection
   * @param {object} [params] - Paramètres de l'opération
   * @param {number} [duration] - Durée de l'opération en ms
   */
  dbOperation(operation, collection, params = {}, duration = null) {
    const meta = {
      operation,
      collection,
      params,
      ...(duration && { duration: `${duration}ms` })
    };
    this.info(`DB Operation: ${operation} on ${collection}`, meta);
  }

  /**
   * Log une erreur de base de données
   * @param {string} operation - Nom de l'opération
   * @param {Error} error - Erreur survenue
   * @param {object} [context] - Contexte additionnel
   */
  dbError(operation, error, context = {}) {
    this.error(
      `Database error during ${operation}`,
      error,
      { ...context, operation }
    );
  }

  /**
   * Log une métrique de performance
   * @param {string} name - Nom de la métrique
   * @param {number} value - Valeur de la métrique
   * @param {string} [unit='ms'] - Unité de mesure
   * @param {object} [tags={}] - Tags additionnels
   */
  metric(name, value, unit = 'ms', tags = {}) {
    this.info(`Metric: ${name}`, {
      metric: name,
      value,
      unit,
      tags
    });
  }
}

// Configuration par défaut des métadonnées
const defaultMeta = {
  service: 'MongoMath',
  version: process.env.npm_package_version || '1.0.0',
  environment: process.env.NODE_ENV || 'development'
};

// Export d'une instance unique
module.exports = new MongoMathLogger(defaultMeta);